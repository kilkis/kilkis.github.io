<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShawnSu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shawnsu.com/"/>
  <updated>2018-05-18T13:22:41.174Z</updated>
  <id>http://shawnsu.com/</id>
  
  <author>
    <name>ShawnSu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity Atlas格式自动化处理脚本</title>
    <link href="http://shawnsu.com/2018/05/18/atlas/"/>
    <id>http://shawnsu.com/2018/05/18/atlas/</id>
    <published>2018-05-17T16:00:00.000Z</published>
    <updated>2018-05-18T13:22:41.174Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Unity Atlas格式自动化处理脚本</code></pre><h3 id="一-为什么要写这个脚本？"><a href="#一-为什么要写这个脚本？" class="headerlink" title="一.为什么要写这个脚本？"></a>一.为什么要写这个脚本？</h3><p>&emsp;&emsp;在制作游戏的过程中，策划和美术同学会在项目里上传各类图片资源，比如角色的贴图，UI的贴图，通常意义上哪怕程序同学事先写了资源的定义文档，通常他们也很难100%的完全做到，一旦有文件没有改成必要的格式和配置，在未来跑游戏的时候，就可能造成性能上的，表现上的各种问题，所以，最好的解决方法，不是教他们怎么操作，而是自动帮他们做好！</p><h3 id="二-解决方案"><a href="#二-解决方案" class="headerlink" title="二.解决方案"></a>二.解决方案</h3><p>&emsp;&emsp;1.写一个脚本<br>&emsp;&emsp;首先，我们在项目的Editor目录下建一个脚本，因为这个功能工作在图片进入项目的时刻，所以属于编辑器模式下,需要使用命名空间UnityEditor。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEditior;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后，想要在图片进入Editor的时候处理，就需要继承AssetPostprocessor类，这样就会有个OnPreprocessTexture()的接口可以继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class TextureImportSetting : AssetPostprocessor &#123;</span><br><span class="line">&#123;</span><br><span class="line">void OnPreprocessTexture()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在这个函数内，我们可以对图片的信息进行处理，使用this.assetPath来区分图片的目录，以达到设定不同属性的目的,比如这里我们来处理UI的贴图格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( this.assetPath.Contains(<span class="string">"Atlas"</span>))</span><br><span class="line">&#123;</span><br><span class="line">TextureImporter importer = (TextureImporter)assetImporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;UI的贴图通常需要设置成Sprite格式，mipmap是不需要的，默认的SpriteImportMode设为Single即可，有需要则按需在制作过程中程序手动修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">importer.textureType = TextureImporterType.Sprite; // 设置为Sprite类型</span><br><span class="line">importer.mipmapEnabled = <span class="literal">false</span>; // 禁用mipmap</span><br><span class="line">importer.spriteImportMode = SpriteImportMode.Single;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;重点！敲黑板！总所周知，Unity的Ugui使用的Atlas机制，atlas打包是需要设定packingTag的，在这里，我们之前设计项目目录的好处就来了，这里可以直接设定atlas贴图的packingTag，这样unity就会自动将他们按照目录生成在一张贴图上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string[] tmp = this.assetPath.Split(<span class="string">'/'</span>);</span><br><span class="line">importer.spritePackingTag = tmp[tmp.Length - 2];</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后，我们可以根据平台进行平台定制化的设定，这样在切换平台后，设定就不需要修改了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TextureImporterPlatformSettings textureSettings = new TextureImporterPlatformSettings();</span><br><span class="line">//允许覆盖设置</span><br><span class="line">textureSettings.overridden = <span class="literal">true</span>;</span><br><span class="line">//安卓平台的设置</span><br><span class="line">textureSettings.name = <span class="string">"Android"</span>;</span><br><span class="line">//最大贴图大小只允许1024</span><br><span class="line">textureSettings.maxTextureSize = 1024;</span><br><span class="line">//贴图格式设置为ETC_RGB4</span><br><span class="line">textureSettings.format = TextureImporterFormat.ETC_RGB4;</span><br><span class="line">//这顶压缩品质</span><br><span class="line">textureSettings.compressionQuality = 50;</span><br><span class="line">//允许自动将alpha通道分离</span><br><span class="line">textureSettings.allowsAlphaSplitting = <span class="literal">true</span>;</span><br><span class="line">//将平台设置配置进去</span><br><span class="line">importer.SetPlatformTextureSettings(textureSettings);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;最后，有个很好用的函数OnPostprocessAllAssets，他会在所有资源被导入、删除、移动完成之后调用，可以在这个函数里用来进行一些资源命名判定，比如大小写之类的，这样可以在资源变化的时候就确保命名的正确性，避免未来因为名称的问题而出现资源加载问题！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;Unity Atlas格式自动化处理脚本
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一-为什么要写这个脚本？&quot;&gt;&lt;a href=&quot;#一-为什么要写这个脚本？&quot; class=&quot;headerlink&quot; title=&quot;一.为什么要写这个脚本？&quot;&gt;&lt;/a&gt;一.为什么
      
    
    </summary>
    
      <category term="开源项目" scheme="http://shawnsu.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="博客" scheme="http://shawnsu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Atlas" scheme="http://shawnsu.com/tags/Atlas/"/>
    
  </entry>
  
  <entry>
    <title>Unity游戏项目目录设计</title>
    <link href="http://shawnsu.com/2018/05/11/unitydir/"/>
    <id>http://shawnsu.com/2018/05/11/unitydir/</id>
    <published>2018-05-10T16:00:00.000Z</published>
    <updated>2018-05-11T12:35:29.574Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Unity游戏项目目录设计                                                     </code></pre><h3 id="一-为什么要设计目录结构？"><a href="#一-为什么要设计目录结构？" class="headerlink" title="一.为什么要设计目录结构？"></a>一.为什么要设计目录结构？</h3><p>&emsp;&emsp;因为做一个游戏是需要一个团队的人多方合作的，如果每个人都按照自己的意愿来进行目录安排，那整个项目就会乱七八糟，游戏资源也会放的很散乱，所以我们需要对资源目录进行设计</p><h3 id="二-如何设计"><a href="#二-如何设计" class="headerlink" title="二.如何设计"></a>二.如何设计</h3><p>&emsp;&emsp;首先，我们定义一个概念，我们以Application.dataPath为资源的根目录，下面的目录都在这个目录下<br>&emsp;&emsp;1.我们需要一个非UI美术资源的目录，比如3D模型，贴图，材质球等，都放在该目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//基础资源目录</span><br><span class="line">\Art</span><br><span class="line">//动作目录，用于分离打包动作</span><br><span class="line">\Art\AnimatorController</span><br><span class="line">//Prefab的目录，打包时直接遍历其中的prefab进行打包</span><br><span class="line">\Art\Prefabs</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;2.UI的2D图片，同一放在Atlas目录下，导入脚本设计会在之后的博客<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Atlas的目录</span><br><span class="line">\Atlas</span><br><span class="line">//用于区分不同的UI界面使用的贴图，并且会根据目录以及我们对贴图的导入设定，为导出资源提前分好目录</span><br><span class="line">\Atlas\atlas_xxxxxx</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;3.音效文件，通常就建个单独的目录存放<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Audio</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;4.换装角色，也就是Avatar资源，通常也单独放置一个目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Avatar的目录</span><br><span class="line">\Avatar</span><br><span class="line">//Avatar的prefab，用于最终导出</span><br><span class="line">\Avatar\prefabs</span><br><span class="line">//比如anim，controller，texutre，因为Avatar是一个通过代码来整合的换装机制，所以基本所有资源都是可以拆的</span><br><span class="line">\Avatar\xxxxxx</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;5.Unity的编辑器脚本，只能放在Editor目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Editor</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;6.字体文件目录，我们需要准备一个目录单独存放字体，当然，字体有一些很棒的处理方式，之后博客也会提到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Fonts</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;7.游戏场景目录，一个游戏的场景其实是有设计目的的，并不是需要一个就多一个这样，所以我们需要建一个目录统一管理下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Scenes</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;8.Shader目录，将所以需要使用的shader，统一放在一个目录下，方便管理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Shader</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;9.资源打包目录，也是必须的目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\StreamingAssets</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;10.UI的目录，存放程序或者策划制作的UI的prefab<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\UI</span><br><span class="line">\UI\Prefabs</span><br><span class="line">\UI\Anim</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;11.最后，就是脚本目录啦<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Scripts</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;Unity游戏项目目录设计                                                     
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一-为什么要设计目录结构？&quot;&gt;&lt;a href=&quot;#一-为什么要设计目录结构？&quot; c
      
    
    </summary>
    
      <category term="开源项目" scheme="http://shawnsu.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="博客" scheme="http://shawnsu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="资源管理" scheme="http://shawnsu.com/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unity游戏底层-资源打包</title>
    <link href="http://shawnsu.com/2018/05/06/resourcemanager_1/"/>
    <id>http://shawnsu.com/2018/05/06/resourcemanager_1/</id>
    <published>2018-05-05T16:00:00.000Z</published>
    <updated>2018-05-07T14:58:13.801Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Unity资源管理-资源打包                                                     </code></pre><h3 id="一-需要完成哪些功能呢？"><a href="#一-需要完成哪些功能呢？" class="headerlink" title="一.需要完成哪些功能呢？"></a>一.需要完成哪些功能呢？</h3><p>&emsp;&emsp;1.自动分平台打包<br>&emsp;&emsp;2.通过md5来确认是否需要打包文件<br>&emsp;&emsp;3.允许单独打包不需要依赖的资源文件</p><h3 id="二-通用代码"><a href="#二-通用代码" class="headerlink" title="二.通用代码"></a>二.通用代码</h3><p>&emsp;&emsp;我们需要引用几个必要的命名空间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using UnityEditor.SceneManagement;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Xml;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后根据平台设定一下不同的目录以及BuildTarget,区分目录的好处是多平台导出的时候，可以马上知道是什么平台的资源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#if UNITY_IPHONE</span></span><br><span class="line">public static string m_Platform = <span class="string">"ios/"</span>;</span><br><span class="line">public static BuildTarget m_target = BuildTarget.iOS;</span><br><span class="line"><span class="comment">#elif UNITY_ANDROID</span></span><br><span class="line">public static string m_Platform = <span class="string">"android/"</span>;</span><br><span class="line">public static BuildTarget m_target = BuildTarget.Android;</span><br><span class="line"><span class="comment">#elif UNITY_STANDALONE_WIN</span></span><br><span class="line">public static string m_Platform = <span class="string">"windows/"</span>;</span><br><span class="line">public static BuildTarget m_target = BuildTarget.StandaloneWindows64;</span><br><span class="line"><span class="comment">#elif UNITY_STANDALONE_OSX</span></span><br><span class="line">public static string m_Platform = <span class="string">"osx/"</span>;</span><br><span class="line">public static BuildTarget m_target = BuildTarget.StandaloneOSXUniversal;</span><br><span class="line"><span class="comment">#endif</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;自己按照导出内容，写一个函数，加上[MenuItem(“xxxx/xxxx”)]的修饰，其中xxxx替换为想要的菜单结构,类似以下结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(<span class="string">"Tools/Assetbundle/ExportJsonMap"</span>)]</span><br><span class="line">public static void <span class="function"><span class="title">AutoExportJsonMap</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三-打包资源"><a href="#三-打包资源" class="headerlink" title="三.打包资源"></a>三.打包资源</h3><p>&emsp;&emsp;Unity的资源打包主要方式是设置所有需要打包的资源文件的assetBundleNames，然后调用同一的命令打包<br>&emsp;&emsp;拿UI的资源做例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void ExportAtlas(BuildTarget target, string path)</span><br><span class="line">&#123;</span><br><span class="line">//我们需要创建放置打包资源的目录，防止目录缺失导致报错</span><br><span class="line">Directory.CreateDirectory(Application.dataPath + <span class="string">"/StreamingAssets/atlas/"</span>);//创建文件目录</span><br><span class="line">Directory.CreateDirectory(Application.dataPath + <span class="string">"/StreamingAssets/atlas/"</span> + path);</span><br><span class="line">DirectoryInfo rootDirInfo = new DirectoryInfo(Application.dataPath + <span class="string">"/Atlas"</span>);</span><br><span class="line">foreach (DirectoryInfo dirInfo <span class="keyword">in</span> rootDirInfo.GetDirectories())</span><br><span class="line">&#123;</span><br><span class="line">//遍历atlas目录下所有需要打包的atlas资源，将他们按对应的atlas分类打包</span><br><span class="line">AssetBundleBuild build = new AssetBundleBuild();</span><br><span class="line">build.assetBundleName = <span class="string">"Atlas/"</span> + path + dirInfo.Name + <span class="string">".unity3d"</span>;</span><br><span class="line">List&lt;string&gt; files = new List&lt;string&gt;();</span><br><span class="line">List&lt;Sprite&gt; assets = new List&lt;Sprite&gt;();</span><br><span class="line">foreach (FileInfo pngFile <span class="keyword">in</span> dirInfo.GetFiles(<span class="string">"*.*"</span>, SearchOption.AllDirectories))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pngFile.FullName.EndsWith(<span class="string">".png"</span>) || pngFile.FullName.EndsWith(<span class="string">".jpg"</span>))</span><br><span class="line">&#123;</span><br><span class="line">string allPath = pngFile.FullName.Replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">allPath = allPath.Replace(Application.dataPath, <span class="string">""</span>);</span><br><span class="line">allPath = <span class="string">"Assets"</span> + allPath;</span><br><span class="line">files.Add(allPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">build.assetNames = files.ToArray();</span><br><span class="line">maps.Add(build);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;资源最后打包的时候就靠一句话<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BuildPipeline.BuildAssetBundles(AssetBundlesOutputPath, maps.ToArray(), BuildAssetBundleOptions.DeterministicAssetBundle | BuildAssetBundleOptions.ChunkBasedCompression, target);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中AssetBundlesOutputPath就是最终要输出的主目录，maps里存放了所有的AssetBundleBuild信息，压缩使用的方式是我们测试下来比较适合手游的方式，target就是平台</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;Unity资源管理-资源打包                                                     
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一-需要完成哪些功能呢？&quot;&gt;&lt;a href=&quot;#一-需要完成哪些功能呢？&quot; cl
      
    
    </summary>
    
      <category term="开源项目" scheme="http://shawnsu.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="博客" scheme="http://shawnsu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="资源管理" scheme="http://shawnsu.com/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unity游戏底层框架普及</title>
    <link href="http://shawnsu.com/2018/04/30/intro/"/>
    <id>http://shawnsu.com/2018/04/30/intro/</id>
    <published>2018-04-29T16:00:00.000Z</published>
    <updated>2018-05-05T12:57:52.544Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Unity游戏制作底层框架-因                                                     </code></pre><h3 id="一-为什么要做这样一个框架？"><a href="#一-为什么要做这样一个框架？" class="headerlink" title="一.为什么要做这样一个框架？"></a>一.为什么要做这样一个框架？</h3><p>&emsp;&emsp;因为我比较懒，不太愿意做重复的工作。。。<br>&emsp;&emsp;然后一个好的框架，可以节省两个方面的消耗：一个是团队内程序上手的时间，以及制作相应功能消耗的时间，另一个则是可以节省后期游戏优化所消耗的时间和需要的团队的能力。因为在框架的机制内制作，会将游戏性能的底线拉高，性能再差也会比没有框架的游戏结构要好。</p><h3 id="二-为什么要分享出来？"><a href="#二-为什么要分享出来？" class="headerlink" title="二.为什么要分享出来？"></a>二.为什么要分享出来？</h3><p>&emsp;&emsp;这个框架在公司内已经有四款Unity项目使用了，两款线上，一款测试，一款在研，为什么我想要分享出来？&emsp;&emsp;最近两天我在看吴军的《见识》，突然觉得，总应该在能力范围内为这个社会，为愿意做游戏的同学们做点什么，让新入行的或者想要提升自己实力的兄弟姐妹们快速的达到一定的水准，也可以让使用Unity的创业团队，尤其不是有成熟的框架和项目经历的团队，更快速的更小风险的往前快速前进，努力在这个红海中活下来，把时间和精力用在做好游戏上，而不是其他上面。</p><h3 id="三-这套框架里会有什么？"><a href="#三-这套框架里会有什么？" class="headerlink" title="三.这套框架里会有什么？"></a>三.这套框架里会有什么？</h3><p>&emsp;&emsp;首先，会有一个最底层的资源管理的机制，包含了打包，加载，以及项目内特殊需求的处理方案，其次，是UI的结构化设计与管理，可以大幅度减少UI制作难度和提高管理效率，另外，还有项目的自动化设计，Avatar相关的处理，王者荣耀级别的Shader与光影处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;Unity游戏制作底层框架-因                                                     
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一-为什么要做这样一个框架？&quot;&gt;&lt;a href=&quot;#一-为什么要做这样一个框架
      
    
    </summary>
    
      <category term="开源项目" scheme="http://shawnsu.com/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="博客" scheme="http://shawnsu.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="介绍" scheme="http://shawnsu.com/tags/%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
